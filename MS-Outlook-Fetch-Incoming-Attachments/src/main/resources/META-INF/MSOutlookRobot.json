{"id":"MSOutlookRobot","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.test.MSOutlookRobot","actions":["start","selectMail","saveAttachments","moveMail","end","uploadAttachmentsToAppian"],"conditionalActions":["emails","moreEmails"],"fieldLinks":[],"actionDetails":[{"id":"start","implementation":"/**\n\t * Action \"start\"\n\t * @return\n\t * @throws Exception\n\t */\npublic void start() throws JidokaException {\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    windows = IJidokaRobot.getInstance(this);\n    outlook = IJidokaOutlook.getInstance(this);\n    try {\n        appianCredentials = server.getCredential(CREDENTIALS_APPIAN_APIKEY, true, ECredentialSearch.FIRST_LISTED);\n        apiKey = appianCredentials.getPassword();\n    } catch (Exception e) {\n        throw new  JidokaFatalException(\"Credentials not found\");\n    }\n    initFromParameters();\n    /*\n\t\t * Set the number of items as the total number of e-mails,\n\t\t */\n    server.setNumberOfItems(mailList.size());\n}"},{"id":"selectMail","implementation":"/**\n\t * Action 'Select Mail'.\n\t * <p>\n\t * Lists the current mail identifier.\n\t */\npublic void selectMail() {\n    currentItem = mailList.get(currentEmailIndex - 1);\n    server.setCurrentItem(currentItemIndex, currentItem.getEntryID());\n    server.info(String.format(\"The current e-mail id is %s and subject %s\", currentItem.getEntryID(), currentItem.getSubject()));\n    setLowCodeVariables();\n}"},{"id":"saveAttachments","implementation":"/**\n\t * Action 'Save Attachments'.\n\t * <p>\n\t * Saves the attachments of an e-mail.\n\t */\npublic void saveAttachments() {\n    try {\n        server.info(String.format(\"Trying to save the attachments of the e-mail with subject %s\", currentItem.getSubject()));\n        saveMailAttachments(currentItem);\n    } catch (JidokaException e) {\n        String warnMsg = \"Error saving the e-mail attachments\";\n        server.warn(warnMsg, e);\n        server.setCurrentItemResultToWarn(warnMsg);\n    }\n}"},{"id":"moveMail","implementation":"/**\n\t * Action 'Move Mail'.\n\t * <p>\n\t * Moves the current e-mail to another folder.\n\t */\npublic void moveMail() {\n    try {\n        server.info(String.format(\"Trying to move the e-mail with subject %s to the folder %s\", currentItem.getSubject(), targetFolder));\n        currentItem.setUnRead(false);\n        // Moves it\n        IOlFolderFW criteria = new  OlFolderFW();\n        criteria.setFolderPath(targetFolder);\n        IOlFolder target = getFolder(criteria);\n        outlook.getOlMailManager().move(currentItem, target);\n        server.info(String.format(\"The e-mail %s has been moved to the folder %s\", currentItem.getSubject(), targetFolder));\n        server.setCurrentItemResultToOK();\n        IRobotVariable pId = lowCodeVariables.get(\"processId\");\n        server.info(\"Process Id: \" + pId.getValue());\n    } catch (JidokaMsOutlookException e) {\n        String warnMsg = String.format(\"The e-mail with subject %s could not be moved\", currentItem.getSubject());\n        server.warn(warnMsg, e);\n        server.setCurrentItemResultToWarn(warnMsg);\n    }\n}"},{"id":"end","implementation":"/**\n\t * Action \"end\"\n\t * @return\n\t * @throws Exception\n\t */\npublic void end() throws Exception {\n    windows.pause(10000);\n    outlook.close();\n}"},{"id":"uploadAttachmentsToAppian","implementation":"public void uploadAttachmentsToAppian() throws JidokaFatalException, IOException {\n    server.debug(\"Looking for files in: \" + attachmentsDir.getAbsolutePath());\n    List<String> documentIds = new  ArrayList();\n    try (Stream<Path> files = Files.list(Paths.get(attachmentsDir.getAbsolutePath()))) {\n        long count = files.count();\n        server.setNumberOfItems((int) count);\n    }\n    for (final File fileEntry : Objects.requireNonNull(attachmentsDir.listFiles())) {\n        server.debug(\"Found: \" + fileEntry.getName());\n        String result = uploadFile(fileEntry);\n        Map<String, Object> resultMap = (Map<String, Object>) RestHelper.fromJson(result);\n        server.debug(\"result: \" + result);\n        if ((int) resultMap.get(\"documentId\") > 0) {\n            documentIds.add(resultMap.get(\"documentId\").toString());\n        } else {\n            throw new  JidokaFatalException(\"Issue starting the Appian process.\");\n        }\n    }\n    setLowCodeDocVariable(documentIds);\n    try {\n        if (attachmentsDir.exists()) {\n            FileUtils.forceDelete(attachmentsDir);\n        }\n        FileUtils.forceMkdir(attachmentsDir);\n    } catch (IOException e) {\n        server.warn(String.format(\"%s could not be cleaned\", attachmentsDir.getAbsolutePath()));\n    }\n}"}],"conditionalActionDetails":[{"id":"emails","implementation":"public String emails() {\n    return currentEmailIndex <= mailList.size() ? \"yes\" : \"no\";\n}"},{"id":"moreEmails","implementation":"/**\n\t * Action 'More Mails?'.\n\t * <p>\n\t * If there are more e-mails to process.\n\t *\n\t * @return the output wire name for the action\n\t */\npublic String moreEmails() {\n    // Increase indices\n    currentEmailIndex++;\n    currentItemIndex++;\n    return currentEmailIndex <= mailList.size() ? \"yes\" : \"no\";\n}"}],"sdkMethods":[]}